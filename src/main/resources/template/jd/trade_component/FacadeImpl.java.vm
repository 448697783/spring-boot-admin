package com.duolabao.trade.service.facade.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.duolabao.trade.export.facade.${className}Facade;
import com.duolabao.trade.export.vo.req.${className}Request;
import com.duolabao.trade.export.vo.res.${className}Response;
import com.jd.jr.aggre.base.common.annotation.MethodLog;
import com.jd.ump.annotation.JProEnum;
import com.jd.ump.annotation.JProfiler;
import org.springframework.stereotype.Service;

//<!-- ${comments}-->
//<jsf:provider id="tradeLedgerServiceJSF"
//interface="com.duolabao.trade.export.facade.${className}Facade"
//		ref="tradeLedgerService" server="defaultServer" alias="${className}FacadeJSF${provider-jsf-alias}">
//</jsf:provider>
/**
 * TODO ${comments}
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Service("${classname}FacadeImpl")
public class ${className}FacadeImpl implements ${className}Facade {
	@Autowired
	private ${className}Rpc ${classname}Rpc;

	@Override
	@MethodLog("方法描述")
	@JProfiler(jKey = "${className}FacadeImpl.query${className}List(${className}Request", mState = { JProEnum.TP,JProEnum.FunctionError })
	public ${className}Response query${className}List(${className}Request  ${classname}Request){
		${className}Response  ${classname}Response = new ${className}Response();

		try{

			//1、参数校验
			checkParameter(${classname}Request);

			//2、查询rpc调用
			query(${classname}Request);

			//3、参数校验
			checkBusiness(${classname}Request);

			//4、处理结果返回
			${classname}Response.setSuccess(true);
			${classname}Response.setCode(RespCode.SUCCESS.getCode());
			${classname}Response.setMsg(RespCode.SUCCESS.getDesc());
		}catch (CheckBusinessException e){
			${classname}Response.setSuccess(false);
			${classname}Response.setCode(e.getCode());
			${classname}Response.setMsg(e.getMessage());
		}catch (CheckParameterException e){
			${classname}Response.setSuccess(false);
			${classname}Response.setCode(e.getCode());
			${classname}Response.setMsg(e.getMessage());
		}catch (Exception e) {
			ContextLog.error("方法描述：",e);
			${classname}Response.setSuccess(false);
			${classname}Response.setCode(RespCode.SYSTEM_EXCEPTION.getCode());
			${classname}Response.setMsg("方法描述");
		}
        return ${classname}Response;
	}

	/**
	 * TODO 参数校验
	 * @author ${author}
	 * @date ${datetime}
	 * @param  ${classname}Request
	 * @return void
	 */
	private void checkParameter(${className}Request  ${classname}Request){
		if(Objects.isNull(${classname}Request)){
			throw new CheckParameterException(RespCode.REQUEST_NULL.getCode(), RespCode.REQUEST_NULL.getDesc());
		}
	}

	/**
	 * TODO 业务校验
	 * @author ${author}
	 * @date ${datetime}
	 * @param  ${classname}Request
	 * @return void
	 */
	private void checkBusiness(${className}Request  ${classname}Request){
		if(Objects.isNull(${classname}Request)){
			throw new CheckParameterException(RespCode.REQUEST_NULL.getCode(), RespCode.REQUEST_NULL.getDesc());
		}
	}

	/**
	 * TODO 业务校验
	 * @author ${author}
	 * @date ${datetime}
	 * @param  ${classname}Request
	 * @return void
	 */
	private Object query(${className}Request  ${classname}Request){
		//TODO JSF
		return null;
	}
}