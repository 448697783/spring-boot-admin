package ${package}.modules.${module}.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
#if($isSql)
import ${package}.modules.${module}.vo.${className}QueryVO;
#end
#if($role)
import ${package}.modules.sys.dao.SysRoleDeptDao;
import ${package}.modules.sys.entity.SysRoleDeptEntity;

#end
import ${package}.modules.${module}.dao.${className}Dao;
import ${package}.modules.${module}.entity.${className}Entity;
import ${package}.modules.${module}.service.I${className}Service;
import ${package}.common.utils.ShiroUtils;
import ${package}.common.annotation.AutoRetry;
import ${package}.common.exception.AutoRetryException;




@Service("${classname}Service")
public class ${className}ServiceImpl implements I${className}Service {
	@Autowired
	private ${className}Dao ${classname}Dao;
#if ($role)	
	@Autowired
	private SysRoleDeptDao sysRoleDeptDao;
#end	
#if($isSql)
	@Override
	public List<${className}Entity> query${className}EntityListForPage(${className}Entity ${classname}Entity,Long startRow, Long endRow){
#if($role)
        List<SysRoleDeptEntity> sysRoleDeptEntity = sysRoleDeptDao.querySysRoleDeptBacth(ShiroUtils.getUserEntity().getRoleIdList());
        ${classname}Entity.setSysRoleDeptEntity(sysRoleDeptEntity);
#end
		return ${classname}Dao.selectEntityListForPage(${classname}Entity,startRow,endRow);
	}
	
	@Override
	public Long query${className}EntityListForPageCount(${className}Entity ${classname}Entity){
#if($role)
        List<SysRoleDeptEntity> sysRoleDeptEntity = sysRoleDeptDao.querySysRoleDeptBacth(ShiroUtils.getUserEntity().getRoleIdList());
        ${classname}Entity.setSysRoleDeptEntity(sysRoleDeptEntity);
#end
		return ${classname}Dao.selectEntityListForPageCount(${classname}Entity);
	}
#else	
	
	@Override
	public List<${className}Entity> query${className}EntityListForPage(${className}Entity ${classname}Entity,Long startRow, Long endRow){
#if($role)
        List<SysRoleDeptEntity> sysRoleDeptEntity = sysRoleDeptDao.querySysRoleDeptBacth(ShiroUtils.getUserEntity().getRoleIdList());
        ${classname}Entity.setSysRoleDeptEntity(sysRoleDeptEntity);
#end
		return ${classname}Dao.selectEntityListForPage(${classname}Entity,startRow,endRow);
	}
	
	@Override
	public Long query${className}EntityListForPageCount(${className}Entity ${classname}Entity){
#if($role)
        List<SysRoleDeptEntity> sysRoleDeptEntity = sysRoleDeptDao.querySysRoleDeptBacth(ShiroUtils.getUserEntity().getRoleIdList());
        ${classname}Entity.setSysRoleDeptEntity(sysRoleDeptEntity);
#end
		return ${classname}Dao.selectEntityListForPageCount(${classname}Entity);
	}
	
	@Override
	public List<${className}Entity> query${className}EntityListAll(${className}Entity ${classname}Entity){
#if($role)
        List<SysRoleDeptEntity> sysRoleDeptEntity = sysRoleDeptDao.querySysRoleDeptBacth(ShiroUtils.getUserEntity().getRoleIdList());
        ${classname}Entity.setSysRoleDeptEntity(sysRoleDeptEntity);
#end
		return ${classname}Dao.selectEntityListAll(${classname}Entity);
	}
	
	@Override
	public int save${className}Entity(${className}Entity ${classname}Entity){
#if ($role)
		${classname}Entity.setDeptId(ShiroUtils.getDeptId());
#end
		return ${classname}Dao.insertEntity(${classname}Entity);
	}
	
	@Override
	public int save${className}Entity(List<${className}Entity> ${classname}Entitys){
		return ${classname}Dao.batchInsertEntity(${classname}Entitys);
	}
	
	@Override
	@AutoRetry
	public int edit${className}Entity(${className}Entity ${classname}Entity){
		int size = ${classname}Dao.updateEntity(${classname}Entity);
		if(size==0){
			throw new AutoRetryException();
		}
		return size;
	}
	
	@Override
	@AutoRetry
	public int edit${className}Entity(List<${className}Entity> ${classname}Entitys){
		int size = ${classname}Dao.batchUpdateEntity(${classname}Entitys);
		if(size==0){
			throw new AutoRetryException();
		}
		return size;
	}
	
	@Override
	public int remove${className}Entity(${className}Entity ${classname}Entity){
		return ${classname}Dao.deleteEntity(${classname}Entity);
	}
	
	@Override
	public int remove${className}Entity(List<${className}Entity> ${classname}Entitys){
		return ${classname}Dao.batchDeleteEntity(${classname}Entitys);
	}
#end
}
