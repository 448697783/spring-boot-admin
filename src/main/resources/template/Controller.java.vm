package ${package}.modules.${module}.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.ResponseBody;

import io.swagger.annotations.ApiParam;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import ${package}.common.validator.ValidatorUtils;
import ${package}.common.utils.BeanCopierUtils;
import ${package}.common.annotation.CtrlLog;
import ${package}.modules.${module}.entity.${className}Entity;
import ${package}.modules.${module}.vo.${className}QueryVO;
import ${package}.modules.${module}.vo.${className}QueryVO.*;
#if(!$isSql)
import ${package}.modules.${module}.vo.${className}SaveVO;
import ${package}.modules.${module}.vo.${className}SaveVO.*;
import ${package}.modules.${module}.vo.${className}DeleteVO;
import ${package}.modules.${module}.vo.${className}DeleteVO.*;
import ${package}.modules.${module}.vo.${className}EditVO;
import ${package}.modules.${module}.vo.${className}EditVO.*;
#end
import ${package}.modules.${module}.service.I${className}Service;


//INSERT INTO `sys_menu` (`menu_id`, `parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`) VALUES (31, 1, '${comments}', 'modules/${module}/${classname}.html', NULL, 1, 'fa fa-file-code-o', 1);
//INSERT INTO `sys_menu` (`menu_id`, `parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`) VALUES (32, 31, '查看', NULL, '${module}:query${className}List', 2, NULL, 0);
//INSERT INTO `sys_menu` (`menu_id`, `parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`) VALUES (33, 31, '新增', NULL, '${module}:save${className}', 2, NULL, 0);
//INSERT INTO `sys_menu` (`menu_id`, `parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`) VALUES (34, 31, '修改', NULL, '${module}:edit${className}', 2, NULL, 0);
//INSERT INTO `sys_menu` (`menu_id`, `parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`) VALUES (35, 31, '删除', NULL, '${module}:delete${className}', 2, NULL, 0);
/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@Api(value="${comments}",tags={"${comments}"})
@RequestMapping("${module}/")
public class ${className}Controller {
	@Autowired
	private I${className}Service ${classname}Service;

#if($isSql)
	/**
	 * 查询列表(可分页)
	 */
	@RequestMapping(value="/query${className}List",method= {RequestMethod.POST,RequestMethod.GET})
	@CtrlLog("查询${comments}")
	@ApiOperation(value="查询${comments}",notes="注意问题点")
	@ResponseBody
	public ${className}QResultVO query${className}List(@ApiParam("查询${comments}参数")${className}QueryVO  ${classname}QueryVO){
		ValidatorUtils.validateEntity(${classname}QueryVO);
		${className}Entity ${classname}Entity = new ${className}Entity();
		BeanCopierUtils.copyProperties(${classname}QueryVO, ${classname}Entity);
		List<${className}Entity> ${classname}List = ${classname}Service.query${className}EntityListForPage(${classname}Entity,${classname}QueryVO.getStartRow(),${classname}QueryVO.getEndRow());
		//统计行数,如果数据量比较大可以才线程同时处理两个语句
		Long count= ${classname}Service.query${className}EntityListForPageCount(${classname}Entity);
		${className}QResultVO ${classname}QResultVO = ${classname}QueryVO.ok(${classname}List);
		${classname}QResultVO.setCount(count);
		return ${classname}QResultVO;
	}
#else
	/**
	 * 查询列表
	 */
	@RequestMapping(value="/query${className}List",method= {RequestMethod.POST,RequestMethod.GET})
	@CtrlLog("查询${comments}")
	@ApiOperation(value="查询${comments}",notes="注意问题点")
	@ResponseBody
	public ${className}QResultVO query${className}List(@ApiParam("查询${comments}参数")${className}QueryVO  ${classname}QueryVO){
		ValidatorUtils.validateEntity(${classname}QueryVO);
		${className}Entity ${classname}Entity = new ${className}Entity();
		BeanCopierUtils.copyProperties(${classname}QueryVO, ${classname}Entity);
		List<${className}Entity> ${classname}List = ${classname}Service.query${className}EntityListForPage(${classname}Entity,${classname}QueryVO.getStartRow(),${classname}QueryVO.getEndRow());
		//统计行数,如果数据量比较大可以才线程同时处理两个语句
		Long count= ${classname}Service.query${className}EntityListForPageCount(${classname}Entity);
		${className}QResultVO ${classname}QResultVO = ${classname}QueryVO.ok(${classname}List);
		${classname}QResultVO.setCount(count);
		return ${classname}QResultVO;
	}
	
	
	/**
	 * 保存
	 */
	@RequestMapping(value="/save${className}",method= {RequestMethod.POST,RequestMethod.GET})
	@CtrlLog("保存${comments}")
	@ApiOperation(value="保存${comments}",notes="注意问题点")
	@ResponseBody
	public ${className}SResultVO save${className}(@ApiParam("保存${comments}参数")@RequestBody(required=false) ${className}SaveVO  ${classname}SaveVO){
		ValidatorUtils.validateEntity(${classname}SaveVO);
		${className}Entity ${classname}Entity = new ${className}Entity();
		BeanCopierUtils.copyProperties(${classname}SaveVO, ${classname}Entity);
	
		${classname}Service.save${className}Entity(${classname}Entity);
		
		return ${className}SResultVO.ok();
	}
	
	/**
	 * 批量保存
	 */
	@RequestMapping(value="/save${className}List",method= {RequestMethod.POST,RequestMethod.GET})
	@CtrlLog("保存${comments}")
	@ApiOperation(value="保存${comments}",notes="注意问题点")
	@ResponseBody
	public ${className}SResultVO save${className}List(@ApiParam("保存${comments}参数")@RequestBody(required=false) List<${className}SaveVO>  ${classname}SaveVOList){
		ValidatorUtils.validateEntity(${classname}SaveVOList);
		
		${className}Entity entity = null;
		List<${className}Entity> entitys = new ArrayList<${className}Entity>(${classname}SaveVOList.size());
		for (${className}SaveVO tempVO : ${classname}SaveVOList) {
			entity = new ${className}Entity();
			BeanCopierUtils.copyProperties( tempVO,entity);
			entitys.add(entity);
		}
	
		${classname}Service.save${className}Entity(entitys);
		
		return ${className}SResultVO.ok();
	}
	
	/**
	 * 修改
	 */
	@RequestMapping(value="/edit${className}",method= {RequestMethod.POST,RequestMethod.GET})
	@CtrlLog("更新${comments}")
	@ApiOperation(value="更新${comments}",notes="注意问题点")
	@ResponseBody
	public ${className}EResultVO edit${className}(@ApiParam("更新${comments}参数")@RequestBody(required=false)${className}EditVO ${classname}EditVO){
		ValidatorUtils.validateEntity(${classname}EditVO);
		${className}Entity ${classname}Entity = new ${className}Entity();
		BeanCopierUtils.copyProperties(${classname}EditVO, ${classname}Entity);
	
		${classname}Service.edit${className}Entity(${classname}Entity);
		
		return  ${className}EResultVO.ok();
	}
	
	/**
	 * 批量修改
	 */
	@RequestMapping(value="/update${className}List",method= {RequestMethod.POST,RequestMethod.GET})
	@CtrlLog("更新${comments}")
	@ApiOperation(value="更新${comments}",notes="注意问题点")
	@ResponseBody
	public ${className}EResultVO edit${className}List(@ApiParam("更新${comments}参数")@RequestBody(required=false) List<${className}EditVO> ${classname}EditVOList){
		ValidatorUtils.validateEntity(${classname}EditVOList);
		${className}Entity entity = null;
		List<${className}Entity> entitys = new ArrayList<${className}Entity>(${classname}EditVOList.size());
		for (${className}EditVO tempVO : ${classname}EditVOList) {
			entity = new ${className}Entity();
			BeanCopierUtils.copyProperties( tempVO,entity);
			entitys.add(entity);
		}
	
		${classname}Service.edit${className}Entity(entitys);
		
		return  ${className}EResultVO.ok();
	}
	
	/**
	 * 删除
	 */
	@RequestMapping(value="/delete${className}",method= {RequestMethod.POST,RequestMethod.GET})
	@CtrlLog("删除${comments}")
	@ApiOperation(value="删除${comments}",notes="注意问题点")
	@ResponseBody
	public ${className}DResultVO delete${className}(@ApiParam("更新${comments}参数")${className}DeleteVO ${classname}DeleteVO){
		ValidatorUtils.validateEntity(${classname}DeleteVO);
		${className}Entity ${classname}Entity = new ${className}Entity();
		BeanCopierUtils.copyProperties( ${classname}DeleteVO,${classname}Entity);
	
		${classname}Service.remove${className}Entity(${classname}Entity);
		
		return ${className}DResultVO.ok();
	}
	
	/**
	 * 批量删除
	 */
	@RequestMapping(value="/delete${className}List",method= {RequestMethod.POST,RequestMethod.GET})
	@CtrlLog("删除${comments}")
	@ApiOperation(value="删除${comments}",notes="注意问题点")
	@ResponseBody
	public ${className}DResultVO delete${className}List(@ApiParam("更新${comments}参数")List<${className}DeleteVO> ${classname}DeleteVOList){
		ValidatorUtils.validateEntity(${classname}DeleteVOList);
		${className}Entity entity = null;
		List<${className}Entity> entitys = new ArrayList<${className}Entity>(${classname}DeleteVOList.size());
		for (${className}DeleteVO tempVO : ${classname}DeleteVOList) {
			entity = new ${className}Entity();
			BeanCopierUtils.copyProperties( tempVO,entity);
			entitys.add(entity);
		}
		
		${classname}Service.remove${className}Entity(entitys);
		
		return ${className}DResultVO.ok();
	}
#end
}
